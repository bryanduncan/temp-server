/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.9'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

javafx {
    version = "17"
    modules = [ 'javafx.base','javafx.controls', 'javafx.fxml']
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

configurations {
    // configuration that holds jars to include in the jar
    mongodb
}

dependencies {
    // Use JUnit Jupiter for testing.
    def junitVersion = '5.8.1'
    implementation 'org.json:json:20230227'
    implementation 'com.google.guava:guava:31.1-jre'
    mongodb group: 'org.mongodb', version: '4.11.0', name: 'mongodb-driver-sync'
    configurations.implementation.extendsFrom(configurations.mongodb)
    
    // This provides the JUnit API.
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    // This provides the TestEngine to actually run the tests.
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}

application {
    // Define the main class for the application.
    mainClass = 'server.MyServer'
}

jar {
    manifest {
        attributes 'Main-Class': 'server.MyServer'
    }
    from {
        configurations.mongodb.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

test {
    useJUnitPlatform()
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}